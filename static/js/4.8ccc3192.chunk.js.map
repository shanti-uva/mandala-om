{"version":3,"sources":["main/MainSearchToggle/AdvancedToggle.js","search/FacetBox.js","search/HistoryBox.js","search/SearchAdvanced.js","main/RightSideBar.js"],"names":["AdvancedToggle","props","useState","viewMode","mode","setMode","chooseViewMode","alert","useEffect","ToggleButtonGroup","name","value","type","className","ToggleButton","onClick","evt","target","stopPropagation","FacetControls","onChange","ref","loadingState","Spinner","animation","role","FacetBox","inputEl","useRef","sortField","setSortField","sortDirection","setSortDirection","open","setOpen","chosen_icon","icon","facetType","facets","chosenFacets","useStoreState","state","search","handleNarrowFilters","current","resetFlag","keyField","chosenHash","reduce","collector","item","onNarrowFilters","filter","sort","limit","length","handleChange","_","debounce","console","log","isChosen","id","ICON_MAP","texts","images","sources","visuals","places","subjects","terms","collections","asset_type","users","creator","languages","feature_types","associated_subjects","perspective","plus","minus","label","facetList","map","buckets","entry","iconClass","icoclass","val","chooseIconClass","fullEntry","uid","fullLabel","match","split","refLabel","valLabel","extra","parseEntry","count","parseId","FacetChoice","key","labelText","chosen","onFacetClick","msg","action","chosenList","Badge","pill","variant","placeholder","defaultValue","onKeyDownCapture","x","keyCode","e","HistoryBox","historyStack","history","removeType","useStoreActions","actions","historyLength","countSearchItems","historyList","HistoryViewer","Navbar","Item","Collapse","Link","eventKey","Type","propTypes","PropTypes","chosenIcon","filters","SearchAdvanced","useHistory","openclass","advanced","reset","setReset","searchView","useRouteMatch","handleFacetChange","operator","command","compound_id","new_filter","field","JSON","stringify","undefined","addFilters","removeFilters","process","REACT_APP_STANDALONE","window","location","href","push","narrowFilter","narrowFilters","getChosenFacets","query","onStateChange","Nav","error","Toggle","to","pager","numFound","Text","clearFilters","onMouseOver","clearAll","asset_count","related_subjects","related_places","related_terms","node_user","defaultChecked","TreeNav","React","lazy","document","getElementById","RightSideBar","setViewMode","setState","handleStateChange","new_state","advancedSearchPortal","SearchContext","tree","fallback","ReactDOM","createPortal"],"mappings":"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","file":"static/js/4.8ccc3192.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ADVANCED_LABEL, BASIC_LABEL } from '../../App';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { BsMap, BsSearch, ImTree } from 'react-icons/all';\nimport './MainSearchToggle.scss';\n\nexport function AdvancedToggle(props) {\n    const [mode, setMode] = useState(props.viewMode || 'off'); // \"search\" | \"tree\" | \"off\"\n\n    const chooseViewMode =\n        props.chooseViewMode ||\n        (() => {\n            alert('No chooseViewMode handler:  mode = ' + mode);\n        });\n\n    useEffect(() => {\n        chooseViewMode(mode);\n    }, [mode]);\n\n    return (\n        <ToggleButtonGroup\n            name=\"Georgie\"\n            value={mode}\n            type={'radio'}\n            className={'c-MainSearchToggle--group'}\n        >\n            <ToggleButton\n                name={'viewMode'}\n                value={'tree'}\n                type={'radio'}\n                className={'c-MainSearchToggle--button'}\n                onClick={(evt) => {\n                    if (evt.target.value === 'tree') {\n                        if (mode === 'tree') {\n                            evt.stopPropagation();\n                            return false;\n                        } else {\n                            setMode('tree');\n                        }\n                        evt.stopPropagation();\n                        return false;\n                    }\n                }}\n            >\n                <ImTree></ImTree>\n            </ToggleButton>\n            <ToggleButton\n                name={'viewMode'}\n                value={'advanced'}\n                type={'radio'}\n                className={'c-MainSearchToggle--button'}\n                onClick={(evt) => {\n                    if (evt.target.value === 'advanced') {\n                        if (mode === 'advanced') {\n                            evt.stopPropagation();\n                            return false;\n                        } else {\n                            setMode('advanced');\n                        }\n                        evt.stopPropagation();\n                        return false;\n                    }\n                }}\n            >\n                <BsSearch></BsSearch>\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { useStoreState } from 'easy-peasy';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { FacetChoice } from './FacetChoice';\n\nimport { BsCheckCircle, BsMap } from 'react-icons/bs';\nimport { ImStack } from 'react-icons/im';\n\nimport './FacetBox.scss';\n\nfunction FacetControls(props) {\n    return (\n        <span className={'sui-advEdit-facet-ctrls-btns'}>\n            <ToggleButtonGroup\n                onChange={props.onChange}\n                name={props.name + '_field'}\n                type={'radio'}\n                value={props.value}\n                ref={props.ref}\n            >\n                <ToggleButton\n                    name={props.name + '_field'}\n                    type={'radio'}\n                    value={'count'}\n                    onClick={props.onClick}\n                >\n                    #\n                </ToggleButton>\n                <ToggleButton\n                    name={props.name + '_field'}\n                    type={'radio'}\n                    value={'index'}\n                    onClick={props.onClick}\n                >\n                    A-Z\n                </ToggleButton>\n            </ToggleButtonGroup>\n\n            {props.loadingState && (\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            )}\n        </span>\n    );\n}\n\nFacetControls.propTypes = {\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    ref: PropTypes.any,\n    onClick: PropTypes.func,\n    loadingState: PropTypes.bool,\n};\n\nexport function FacetBox(props) {\n    const inputEl = useRef(null);\n    const sortFieldEl = useRef(null);\n    const [sortField, setSortField] = useState('count');\n    const sortDirectionEl = useRef(null);\n    const [sortDirection, setSortDirection] = useState('desc');\n\n    const [open, setOpen] = useState(false);\n\n    let chosen_icon = props.icon;\n    const facetType = props.facetType;\n    const facets = props.facets;\n    const chosenFacets = props.chosenFacets || [];\n\n    const loadingState = useStoreState((state) => state.search.loadingState);\n\n    // if the sortField or sortDirection change make sure the send handleNarrowFilter messages\n    useEffect(() => {\n        handleNarrowFilters();\n    }, [sortField, sortDirection]);\n\n    useEffect(() => {\n        inputEl.current.value = '';\n    }, [props.resetFlag]);\n\n    // console.log(\"FacetBox: props = \", props);\n\n    function arrayToHash(array, keyField) {\n        return array.reduce((collector, item) => {\n            collector[item[keyField]] = item;\n            return collector;\n        }, {});\n    }\n\n    const chosenHash = arrayToHash(chosenFacets, 'id');\n\n    function handleNarrowFilters() {\n        if (props.onNarrowFilters) {\n            props.onNarrowFilters({\n                filter: props.facetType,\n                search: inputEl.current.value,\n                sort: sortField + ' ' + sortDirection,\n                limit: inputEl.current?.value?.length ? -1 : null,\n            });\n        }\n    }\n\n    const handleKey = (x) => {\n        // submit on return\n        if (x.keyCode === 13) {\n            handleNarrowFilters();\n        }\n    };\n\n    const handleChange =\n        // To be used for completions if desired\n        _.debounce(() => {\n            console.log('handleChange: ', inputEl.current.value);\n            handleNarrowFilters();\n        }, 500);\n\n    // console.log(\"chosen hash = \", chosenHash);\n    const isChosen = (id) => (chosenHash[id] ? true : false);\n    // console.log(\"FacetBox (\" + facetType + \") chosenHash: \", chosenHash );\n\n    const ICON_MAP = {\n        'audio-video': <span className={'icon u-icon__audio-video'} />,\n        texts: <span className={'icon u-icon__texts'} />,\n        'texts:pages': <span className={'icon u-icon__texts'} />,\n        images: <span className={'icon u-icon__images'} />,\n        sources: <span className={'icon u-icon__sources'} />,\n        visuals: <span className={'icon u-icon__visuals'} />,\n        places: <span className={'icon u-icon__places'} />,\n        subjects: <span className={'icon u-icon__subjects'} />,\n        terms: <span className={'icon u-icon__terms'} />,\n        collections: <ImStack />,\n        //       'recent-searches': '\\ue62e',\n        asset_type: <BsCheckCircle />,\n        users: <span className={'icon u-icon__community'} />,\n        creator: <span className={'icon u-icon__agents'} />,\n        languages: <span className={'icon u-icon__comments-o'} />,\n        feature_types: <BsMap />,\n        associated_subjects: <span className={'icon u-icon__essays'} />,\n        perspective: <span className={'icon u-icon__file-picture'} />,\n    };\n\n    chosen_icon = chosen_icon || ICON_MAP[facetType];\n    // console.log('facetType = ', facetType, ' chosen_icon = ', chosen_icon);\n\n    const icon = chosen_icon;\n    const plus = <span className={'u-icon__plus icon'} />;\n    const minus = <span className={'u-icon__minus icon'} />;\n    const label = props.label || 'UNKNOWN LABEL';\n\n    // console.debug(\"FacetBox: props = \", props);\n\n    function parseEntry(entry, fullEntry) {\n        let label = '';\n        let uid = '';\n        let fullLabel = '';\n\n        if (entry.val.match(/[^=]+\\=[^\\|]+\\|[^=]+.*/)) {\n            // console.log(\"parseEntry SPECIAL CASE!\")\n            const [ref, val] = entry.val.split('|');\n            const [refLabel, refUid] = ref.split('=');\n            const [valLabel, valUid] = val.split('=');\n\n            label = refLabel + ': ' + valLabel;\n            uid = entry.val;\n            fullLabel = label;\n        } else {\n            // console.log(\"FacetBox.parseEntry: \" + JSON.stringify(entry));\n            [label, uid] = entry.val.split('|');\n            label = label ? label : 'undefined';\n            const extra = fullEntry && uid ? <span>({uid})</span> : '';\n            fullLabel = (\n                <span uid={uid}>\n                    {label} {extra}\n                </span>\n            );\n        }\n        return { label: label, fullLabel: fullLabel, value: uid ? uid : label };\n    }\n\n    function chooseIconClass(entry) {\n        let icoclass = entry.val;\n        icoclass = icoclass === 'texts:pages' ? 'file-text-o' : icoclass;\n        return 'u-icon__' + icoclass + ' icon';\n    }\n\n    function parseId(id) {\n        const split = id.split('|');\n        const uid = split[1] ? split[1] : id;\n        return uid;\n    }\n\n    const facetList = _.map(facets?.buckets, (entry) => {\n        // Adjust\n        const iconClass = chooseIconClass(entry);\n        const { label, fullLabel, value } = parseEntry(entry, false);\n        const count = entry.count;\n        const id = facetType + ':' + parseId(entry.val);\n        return (\n            <FacetChoice\n                mode={'add'}\n                key={`${value} ${label} ${facetType}`}\n                className={iconClass}\n                value={value}\n                labelText={label}\n                label={fullLabel}\n                count={count}\n                facetType={facetType}\n                chosen={isChosen(id)}\n                onFacetClick={(msg) => {\n                    props.onFacetClick({\n                        ...msg,\n                        action: isChosen(id) ? 'remove' : 'add',\n                    });\n                }}\n            />\n        );\n    });\n    const chosenList = _.map(props.chosenFacets, (entry) => {\n        const removeIconClass = 'sui-advTermRem u-icon__cancel-circle icon';\n        // console.log(\"Creating removal FacetChoice from \", entry);\n\n        return (\n            <FacetChoice\n                mode={'remove'}\n                key={`Remove ${entry.match} ${label} ${facetType}`}\n                className={removeIconClass}\n                value={entry.match}\n                labelText={entry.label}\n                label={entry.label}\n                facetType={facetType}\n                onFacetClick={(msg) => {\n                    props.onFacetClick({ ...msg, action: 'remove' });\n                }}\n            />\n        );\n    });\n\n    const name = 'sort_' + props.id;\n\n    const handleSortClick = function (e) {\n        if (e.target.name) {\n            // console.log(\"ToggleButton CLICK name=\", e.target.name, \" value=\", e.target.value);\n            // console.log(\"ToggleButton CLICK current sortDirection= \", sortDirection);\n            // console.log(\"ToggleButton CLICK current sortField= \", sortField);\n\n            // We're clicking on the currently selected sort type -- Let's toggle the sort direction\n            if (e.target.value === sortField) {\n                if (sortDirection === 'asc') {\n                    setSortDirection('desc');\n                } else {\n                    setSortDirection('asc');\n                }\n            }\n        }\n    };\n\n    const facetBox = (\n        <div className={'sui-advBox sui-advBox-' + props.id}>\n            <div\n                className={'sui-advHeader'}\n                id={'sui-advHeader-A'}\n                onClick={() => setOpen(!open)}\n            >\n                <span className={'icon'}>{icon}</span>\n                <span className=\"app-name\">{label}</span>\n                <span id={'sui-advPlus-' + props.id} className={'sui-advPlus'}>\n                    <Badge\n                        pill\n                        variant={facetList.length ? 'primary' : 'secondary'}\n                    >\n                        {facetList.length}\n                    </Badge>{' '}\n                    {open ? minus : plus}\n                </span>\n            </div>\n\n            <div className={'sui-advTerm'} id={'sui-advTerm-' + props.id}>\n                {chosenList}\n            </div>\n            <div\n                className={\n                    'sui-advEdit c-FacetBox--expander ' +\n                    (open ? 'open' : 'closed')\n                }\n                id={'sui-advEdit-' + props.id}\n            >\n                <div className={'sui-advEdit-facet-ctrls'}>\n                    <input\n                        type={'text'}\n                        placeholder=\"Filter this list\"\n                        onChange={handleChange}\n                        defaultValue={''}\n                        onKeyDownCapture={handleKey}\n                        ref={inputEl}\n                    />\n\n                    <FacetControls\n                        onChange={setSortField}\n                        name={name}\n                        value={sortField}\n                        onClick={handleSortClick}\n                        loadingState={loadingState}\n                    />\n                </div>\n\n                <div className={'sui-adv-facetlist overflow-auto'}>\n                    {facetList}\n                </div>\n            </div>\n        </div>\n    );\n    return facetBox;\n}\n\nFacetBox.propTypes = {\n    label: PropTypes.string,\n    chosenIcon: PropTypes.string,\n    facetType: PropTypes.string,\n    filters: PropTypes.array,\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/cjs/Nav';\nimport NavItem from 'react-bootstrap/NavItem';\nimport NavLink from 'react-bootstrap/NavLink';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { FacetChoice } from './FacetChoice';\nimport HistoryViewer from '../views/History/HistoryViewer';\nimport { BsArrowCounterclockwise } from 'react-icons/bs';\nimport * as PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport { Type } from '../model/HistoryModel';\n\nfunction countSearchItems(historyStack) {\n    return historyStack.filter((x) => {\n        return x.search?.length > 0;\n    }).length;\n}\n\nexport function HistoryBox(props) {\n    const inputEl = useRef(null);\n    const sortFieldEl = useRef(null);\n    const [sortField, setSortField] = useState('count');\n    const sortDirectionEl = useRef(null);\n    const [sortDirection, setSortDirection] = useState('desc');\n\n    const [open, setOpen] = useState(false);\n    let chosen_icon = props.icon;\n    const facetType = props.facetType;\n    const facets = props.facets;\n    const chosenFacets = props.chosenFacets || [];\n\n    const loadingState = useStoreState((state) => state.search.loadingState);\n    const historyStack = useStoreState((state) => state.history.historyStack);\n    const { removeType } = useStoreActions((actions) => actions.history);\n\n    // if the sortField or sortDirection change make sure the send handleNarrowFilter messages\n    // useEffect(() => {\n    //     handleNarrowFilters();\n    // }, [sortField, sortDirection]);\n\n    // useEffect(() => {\n    //     inputEl.current.value = '';\n    // }, [props.resetFlag]);\n\n    // console.log(\"HistoryBox: props = \", props);\n\n    function arrayToHash(array, keyField) {\n        return array.reduce((collector, item) => {\n            collector[item[keyField]] = item;\n            return collector;\n        }, {});\n    }\n\n    const chosenHash = arrayToHash(chosenFacets, 'id');\n\n    function handleNarrowFilters() {\n        if (props.onNarrowFilters) {\n            props.onNarrowFilters({\n                filter: props.facetType,\n                search: inputEl.current.value,\n                sort: sortField + ' ' + sortDirection,\n                limit: inputEl.current?.value?.length ? -1 : null,\n            });\n        }\n    }\n\n    const handleKey = (x) => {\n        // submit on return\n        if (x.keyCode === 13) {\n            handleNarrowFilters();\n        }\n    };\n\n    const handleChange =\n        // To be used for completions if desired\n        _.debounce(() => {\n            console.log('handleChange: ', inputEl.current.value);\n            handleNarrowFilters();\n        }, 500);\n\n    // console.log(\"chosen hash = \", chosenHash);\n    const isChosen = (id) => (chosenHash[id] ? true : false);\n    // console.log(\"HistoryBox (\" + facetType + \") chosenHash: \", chosenHash );\n\n    const ICON_MAP = {\n        'audio-video': <span className={'icon u-icon__audio-video'} />,\n        texts: <span className={'u-icon__texts icon'} />,\n        'texts:pages': <span className={'u-icon__texts icon'} />,\n        images: '\\ue62a',\n        sources: '\\ue631',\n        visuals: '\\ue63b',\n        places: '\\ue62b',\n        subjects: '\\ue634',\n        terms: '\\ue635',\n        collections: '\\ue633',\n        'recent-searches': '\\ue62e',\n        asset_type: '\\ue60b',\n        users: '\\ue600',\n        creator: '\\ue600',\n        languages: '\\ue670',\n        feature_types: <span className={'u-icon__explore icon'} />,\n    };\n\n    chosen_icon = chosen_icon || ICON_MAP[facetType];\n    const icon = chosen_icon;\n    const plus = <span className={'u-icon__plus icon'} />;\n    const minus = <span className={'u-icon__minus icon'} />;\n    const label = props.label || 'UNKNOWN LABEL';\n\n    // console.debug(\"HistoryBox: props = \", props);\n\n    function parseEntry(entry, fullEntry) {\n        let label = '';\n        let uid = '';\n        let fullLabel = '';\n\n        if (entry.val.match(/[^=]+\\=[^\\|]+\\|[^=]+.*/)) {\n            // console.log(\"parseEntry SPECIAL CASE!\")\n            const [ref, val] = entry.val.split('|');\n            const [refLabel, refUid] = ref.split('=');\n            const [valLabel, valUid] = val.split('=');\n\n            label = refLabel + ': ' + valLabel;\n            uid = entry.val;\n            fullLabel = label;\n        } else {\n            // console.log(\"HistoryBox.parseEntry: \" + JSON.stringify(entry));\n            [label, uid] = entry.val.split('|');\n            label = label ? label : 'undefined';\n            const extra = fullEntry && uid ? <span>({uid})</span> : '';\n            fullLabel = (\n                <span uid={uid}>\n                    {label} {extra}\n                </span>\n            );\n        }\n        return { label: label, fullLabel: fullLabel, value: uid ? uid : label };\n    }\n\n    function chooseIconClass(entry) {\n        let icoclass = entry.val;\n        icoclass = icoclass === 'texts:pages' ? 'file-text-o' : icoclass;\n        return 'u-icon__' + icoclass + ' icon';\n    }\n\n    function parseId(id) {\n        const split = id.split('|');\n        const uid = split[1] ? split[1] : id;\n        return uid;\n    }\n\n    const historyLength = countSearchItems(historyStack);\n\n    const historyList = <HistoryViewer mode={'search'} />;\n\n    const name = 'sort_' + props.id;\n    const handleResetHistory = () => {\n        console.log('HistoryBox:  RESET HISTORY');\n        removeType(Type.search);\n    };\n    const historyBox = (\n        <div className={'sui-advBox sui-advBox-' + props.id}>\n            <div\n                className={'sui-advHeader'}\n                id={'sui-advHeader-A'}\n                onClick={() => setOpen(!open)}\n            >\n                <span className={'icon'}>\n                    <BsArrowCounterclockwise />\n                </span>\n                <span className=\"app-name\">{label}</span>\n                <span id={'sui-advPlus-' + props.id} className={'sui-advPlus'}>\n                    <Badge\n                        pill\n                        variant={historyLength ? 'primary' : 'secondary'}\n                    >\n                        {historyLength}\n                    </Badge>{' '}\n                    {open ? minus : plus}\n                </span>\n            </div>\n\n            {/*<div className={'sui-advTerm'} id={'sui-advTerm-' + props.id}>*/}\n            {/*    {chosenList}*/}\n            {/*</div>*/}\n            <div\n                className={\n                    'sui-advEdit c-FacetBox--expander ' +\n                    (open ? 'open' : 'closed')\n                }\n                id={'sui-advEdit-' + props.id}\n            >\n                <Navbar>\n                    <Nav.Item className={'sui-advEdit-facet-ctrls'}>\n                        <input\n                            type={'text'}\n                            placeholder=\"Filter this list\"\n                            onChange={handleChange}\n                            defaultValue={''}\n                            onKeyDownCapture={handleKey}\n                            ref={inputEl}\n                        />\n                    </Nav.Item>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <Nav.Link\n                            eventKey=\"resetHistory\"\n                            onClick={handleResetHistory}\n                        >\n                            clear\n                        </Nav.Link>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <div className={'sui-adv-facetlist overflow-auto'}>\n                    {historyLength ? historyList : 'Search History is empty.'}\n                </div>\n            </div>\n        </div>\n    );\n    return historyBox;\n}\n\nHistoryBox.propTypes = {\n    label: PropTypes.string,\n    chosenIcon: PropTypes.string,\n    facetType: PropTypes.string,\n    filters: PropTypes.array,\n};\n","import { FacetBox } from './FacetBox';\nimport React, { useState } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\nimport Badge from 'react-bootstrap/Badge';\nimport { HistoryBox } from './HistoryBox';\nimport { useStoreState } from 'easy-peasy';\n\nconst SEARCH_PATH = '/search';\n\nexport function SearchAdvanced(props) {\n    const history = useHistory();\n    let openclass = props.advanced ? 'open' : 'closed';\n    let [reset, setReset] = useState(0);\n    const historyStack = useStoreState((state) => state.history.historyStack);\n\n    // This tells us whether we are viewing the search results\n    // so that we can give a link to go there (or not).\n    const searchView = useRouteMatch(SEARCH_PATH);\n\n    // console.log(\"SearchAdvance searchView = \", searchView);\n\n    function gotoSearchPage() {\n        if (!searchView) {\n            if (process.env.REACT_APP_STANDALONE === 'standalone') {\n                window.location.href = `${process.env.REACT_APP_STANDALONE_PATH}/#/search`;\n            } else {\n                history.push(SEARCH_PATH);\n            }\n        }\n    }\n\n    function handleFacetChange(msg) {\n        const command = {\n            facetType: msg.facetType,\n            value: msg.value,\n            operator: msg.operator,\n            action: msg.action,\n        };\n        // console.log(\"SearchAdvanced:  handleFacetChange:  received: \", command);\n        const search = props.search;\n        const compound_id = `${msg.facetType}:${msg.value}`;\n\n        if (command.action === null || command.action === 'add') {\n            const new_filter = {\n                id: compound_id,\n                label: msg.labelText,\n                operator: msg.operator,\n                field: msg.facetType,\n                match: msg.value,\n            };\n\n            console.log(\n                'NEW FILTER: ' + JSON.stringify(new_filter, undefined, 2)\n            );\n            search.addFilters([new_filter]);\n        } else if (command.action === 'remove') {\n            search.removeFilters([{ id: compound_id }]);\n        }\n        if (command.action !== 'remove') {\n            gotoSearchPage(); // declaratively navigate to search\n        }\n    }\n\n    function handleNarrowFilters(narrowFilter) {\n        // console.log('handleNarrowFilters narrowFilter = ', narrowFilter);\n        const search = props?.search;\n        if (search) {\n            search.narrowFilters(narrowFilter);\n        }\n    }\n\n    function getChosenFacets(type) {\n        // console.log(\"getChosenFacets: finding in:\", props.search.query.filters)\n        return props?.search?.query?.filters?.filter((x) => x.field === type);\n    }\n\n    function handleResetFilters() {\n        if (props.search) {\n            props.search.clearFilters();\n        }\n        setReset(reset + 1);\n    }\n\n    function handleResetAll() {\n        if (props.search) {\n            props.search.clearAll();\n        }\n        setReset(reset + 1);\n    }\n\n    function handleResetSuper() {\n        if (props.search) {\n            props.search.superClear();\n        }\n        setReset(reset + 1);\n    }\n\n    // console.log (\"SEARCHY \", props );\n    function closeAdvanced() {\n        if (typeof props.onStateChange === 'function') {\n            props.onStateChange({ advanced: false });\n        } else {\n            console.error(\n                'SearchAdvanced: No onStateChange() function passed in properties!'\n            );\n        }\n    }\n\n    // TODO: review whether the FacetBoxes should be a configured list rather than hand-managed components as they are now.\n    const advanced = (\n        <aside\n            id=\"l-column__search\"\n            className={`l-column__search ${openclass}`}\n        >\n            {typeof props.onStateChange === 'function' && (\n                <Navbar className={'justify-content-end'}>\n                    <Nav.Link onClick={closeAdvanced}>\n                        <span className={'icon shanticon-cancel'}></span>\n                    </Nav.Link>\n                </Navbar>\n            )}\n            <Navbar>\n                {/*<Navbar.Brand href=\"#home\">Navbar with text</Navbar.Brand>*/}\n                <Navbar.Toggle />\n                {!searchView &&\n                    process.env.REACT_APP_STANDALONE !== 'standalone' && (\n                        <Link to={SEARCH_PATH}>\n                            {'<<'} Show Results{' '}\n                            <Badge pill variant={'secondary'}>\n                                {props?.pager?.numFound}\n                            </Badge>\n                        </Link>\n                    )}\n                {!searchView &&\n                    process.env.REACT_APP_STANDALONE === 'standalone' && (\n                        <a\n                            href={`${process.env.REACT_APP_STANDALONE_PATH}/#/search`}\n                        >\n                            {'<<'} Show Results{' '}\n                            <Badge pill variant={'secondary'}>\n                                {props?.pager?.numFound}\n                            </Badge>\n                        </a>\n                    )}\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text>Reset: </Navbar.Text>\n                    <Nav.Link\n                        eventKey=\"resetFilters\"\n                        onClick={handleResetFilters}\n                    >\n                        Filters\n                    </Nav.Link>\n                    |\n                    <Nav.Link\n                        eventKey=\"resetAll\"\n                        onMouseOver={(x) => console.log(x)}\n                        onClick={handleResetAll}\n                    >\n                        All\n                    </Nav.Link>\n                </Navbar.Collapse>\n            </Navbar>\n\n            <section>\n                <FacetBox\n                    id=\"asset_type\"\n                    label=\"item type\"\n                    facets={props.facets?.asset_count}\n                    facetType={'asset_type'}\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('asset_type')}\n                />\n                <FacetBox\n                    id=\"subjects\"\n                    label=\"related subjects\"\n                    facets={props.facets?.related_subjects}\n                    facetType=\"subjects\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('subjects')}\n                />\n                <FacetBox\n                    id=\"places\"\n                    label=\"related places\"\n                    facets={props.facets?.related_places}\n                    facetType=\"places\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('places')}\n                />\n                <FacetBox\n                    id=\"terms\"\n                    label=\"related terms\"\n                    facets={props.facets?.related_terms}\n                    facetType=\"terms\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('terms')}\n                />\n                <FacetBox\n                    id=\"feature_types\"\n                    label=\"feature types\"\n                    facets={props.facets?.feature_types}\n                    facetType=\"feature_types\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('feature_types')}\n                />\n\n                <FacetBox\n                    id=\"collections\"\n                    label=\"collections\"\n                    facets={props.facets?.collections}\n                    facetType=\"collections\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('collections')}\n                />\n                <FacetBox\n                    id=\"languages\"\n                    label=\"languages\"\n                    facets={props.facets?.languages}\n                    facetType=\"languages\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('languages')}\n                />\n                <FacetBox\n                    id=\"users\"\n                    label=\"users\"\n                    facets={props.facets?.node_user}\n                    facetType=\"users\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('users')}\n                />\n\n                <FacetBox\n                    id=\"creator\"\n                    label=\"creator\"\n                    facets={props.facets?.creator}\n                    facetType=\"creator\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('creator')}\n                />\n\n                <FacetBox\n                    id=\"perspective\"\n                    label=\"perspective\"\n                    facets={props.facets?.perspective}\n                    facetType=\"perspective\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('perspective')}\n                />\n\n                <FacetBox\n                    id=\"associated subjects\"\n                    label=\"Associated Subjects\"\n                    facets={props.facets?.associated_subjects}\n                    facetType=\"associated_subjects\"\n                    resetFlag={reset}\n                    onFacetClick={handleFacetChange}\n                    onNarrowFilters={handleNarrowFilters}\n                    chosenFacets={getChosenFacets('associated_subjects')}\n                />\n\n                <HistoryBox\n                    historyStack={historyStack}\n                    id=\"recent\"\n                    label=\"recent searches\"\n                    facetType=\"recent-searches\"\n                />\n            </section>\n            <div className={'sui-advFooter'}>\n                Show Boolean Controls? &nbsp;\n                <input\n                    type=\"checkbox\"\n                    id=\"sui-showBool\"\n                    defaultChecked={'checked'}\n                ></input>\n            </div>\n        </aside>\n    );\n\n    return advanced;\n}\n","import React, { useState, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport SearchContext from '../context/SearchContext';\nimport { AdvancedToggle } from './MainSearchToggle/AdvancedToggle';\nimport { SearchAdvanced } from '../search/SearchAdvanced';\nconst TreeNav = React.lazy(() => import('./TreeNav'));\n\nconst target = document.getElementById('advancedSearchPortal');\n\nexport default function RightSideBar(props) {\n    const [viewMode, setViewMode] = useState('advanced');\n    const [state, setState] = useState({});\n    const handleStateChange = (new_state) => {\n        setState({ ...state, ...new_state });\n    };\n\n    function chooseViewMode(mode) {\n        setViewMode(mode);\n        if (mode === 'off') {\n            handleStateChange({ advanced: false, tree: false });\n        } else if (mode === 'tree') {\n            handleStateChange({ advanced: false, tree: true });\n        } else if (mode === 'advanced') {\n            handleStateChange({ advanced: true, tree: false });\n        }\n    }\n    const advancedSearchPortal = (\n        <>\n            <section className=\"l-content__rightsidebar\">\n                <SearchContext>\n                    <AdvancedToggle\n                        chooseViewMode={chooseViewMode}\n                        viewMode={viewMode}\n                    />\n                </SearchContext>\n                <div className=\"advanced-search-and-tree\">\n                    {viewMode === 'advanced' && (\n                        <SearchContext>\n                            <SearchAdvanced\n                                advanced={state.advanced}\n                                onStateChange={props.onStateChange}\n                            />\n                        </SearchContext>\n                    )}\n                    {viewMode === 'tree' && (\n                        <Suspense fallback={<div>Loading...</div>}>\n                            <TreeNav tree={state.tree} />\n                        </Suspense>\n                    )}\n                </div>\n            </section>\n        </>\n    );\n\n    if (target) {\n        return ReactDOM.createPortal(advancedSearchPortal, target);\n    } else {\n        return advancedSearchPortal;\n    }\n}\n"],"sourceRoot":""}